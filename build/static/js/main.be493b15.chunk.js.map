{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","TEST_NFTS","App","useState","walletAddress","setWalletAddress","inputNameValue","setInputNameValue","inputNftValue","setInputNftValue","nftList","setNftList","userName","setUserName","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","error","connectWallet","saveName","length","saveNft","onInputNameChange","event","value","target","onInputNftChange","useEffect","onLoad","addEventListener","removeEventListener","className","onSubmit","preventDefault","type","placeholder","name","onChange","onClick","map","nft","src","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be493b15.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'kittiecrypto';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NFTS = [\n    'https://media3.giphy.com/media/k0IRv7HUUqL3BJqYbI/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g',\n    'https://media0.giphy.com/media/4oXQFWY1WRAxCAbS2H/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g',\n    'https://media0.giphy.com/media/xxBBZgE1XpreXSsNPz/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g',\n    'https://media1.giphy.com/media/KluRpaqe0ZyyFRfDzi/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g'\n]\n\nconst App = () => {\n\n    // State\n    const [walletAddress, setWalletAddress] = useState(null);\n    const [inputNameValue, setInputNameValue] = useState('');\n    const [inputNftValue, setInputNftValue] = useState('');\n    const [nftList, setNftList] = useState([]);\n    const [userName, setUserName] = useState('');\n\n    /*\n     * This function holds the logic for deciding if a Phantom Wallet is\n     * connected or not\n     */\n    const checkIfWalletIsConnected = async () => {\n        try {\n            const {solana} = window;\n\n            if (solana) {\n                if (solana.isPhantom) {\n                    console.log('Phantom wallet found!');\n                    /*\n                     * The solana object gives us a function that will allow us to connect\n                     * directly with the user's wallet!\n                     */\n                    const response = await solana.connect({onlyIfTrusted: true});\n                    console.log(\n                        'Connected with Public Key:',\n                        response.publicKey.toString()\n                    );\n\n                    /*\n                    * Set the user's publicKey in state to be used later!\n                    */\n                    setWalletAddress(response.publicKey.toString());\n                }\n            } else {\n                console.log('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    /*\n     * Let's define this method so our code doesn't break.\n     * We will write the logic for this next!\n     */\n    const connectWallet = async () => {\n        const {solana} = window;\n        if (solana) {\n            const response = await solana.connect();\n            console.log('Connected with Public Key:', response.publicKey.toString());\n            setWalletAddress(response.publicKey.toString());\n        }\n    };\n    const saveName = async () => {\n        if (inputNameValue.length > 0) {\n            console.log('Name:', inputNameValue);\n            setUserName(inputNameValue);\n        } else {\n            console.log('Empty input name. Try again.');\n        }\n    };\n    const saveNft = async () => {\n        if (inputNftValue.length > 0) {\n            console.log('URL:', inputNftValue);\n            setNftList([...nftList, inputNftValue]);\n            setInputNftValue('');\n        } else {\n            console.log('Empty input URL. Try again.');\n        }\n    };\n    const onInputNameChange = (event) => {\n        const {value} = event.target;\n        setInputNameValue(value);\n    };\n    const onInputNftChange = (event) => {\n        const {value} = event.target;\n        setInputNftValue(value);\n    };\n\n    /*\n     * We want to render this UI when the user hasn't connected\n     * their wallet to our app yet.\n     */\n    const renderUserNameContainer = () => (\n        <div className=\"username-container\">\n            Hi {userName}!\n        </div>\n    );\n\n    const renderNotConnectedContainer = () => (\n        <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWallet}>\n            Connect to Wallet\n        </button>\n    );\n\n    const renderSetNameInput = () => (\n        <div className=\"form-container\">\n            <form\n                onSubmit={(event) => {\n                    event.preventDefault();\n                    saveName()\n                }}>\n                <input type=\"text\" placeholder=\"Set your name\" name=\"userName\" value={inputNameValue}\n                       onChange={onInputNameChange}/>\n                <button type=\"submit\" className=\"cta-button submit-button\">Save</button>\n            </form>\n        </div>\n    );\n\n    const renderConnectedContainer = () => (\n        <div className=\"connected-container\">\n            <div className=\"add-nft-container\">\n                <form\n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        saveNft()\n                    }}>\n                    <input type=\"text\" name=\"nftValue\" placeholder=\"Add NFT URL\" value={inputNftValue}\n                           onChange={onInputNftChange}/>\n                    <button type=\"submit\" className=\"cta-button submit-button\">Add</button>\n                </form>\n            </div>\n            <table className=\"nft-table\">\n                <thead className=\"nft-item table-header\">\n                    <tr>\n                        <th className=\"item-name\">Item</th>\n                        <th className=\"item-price\">Acquisition Price</th>\n                    </tr>\n                </thead>\n                <tbody>\n                <tr className=\"divider\"><td>&nbsp;</td></tr>\n                {nftList.map(nft => (\n                    <tr className=\"nft-item\" key={nft}>\n                        <td className=\"item-name\"><img src={nft} alt={nft}/> <span>Lucaionescuart GIF</span></td>\n                        <td className=\"item-price\">1 SOL</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        </div>\n    );\n\n    /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n    useEffect(() => {\n        const onLoad = async () => {\n            await checkIfWalletIsConnected();\n        };\n        window.addEventListener('load', onLoad);\n        return () => window.removeEventListener('load', onLoad);\n    }, []);\n\n    useEffect(() => {\n        if (walletAddress) {\n            console.log('Fetching NFT list...');\n\n            // Call Solana program here.\n\n            // Set state\n            setNftList(TEST_NFTS);\n        }\n    }, [walletAddress]);\n\n    return (\n        <div className=\"App\">\n            <div className={walletAddress ? 'authed-container' : 'container'}>\n                <div className=\"header-container\">\n                    <p className=\"header\">NFT wallet</p>\n                    {walletAddress && !userName && renderSetNameInput()}\n                    {userName && renderUserNameContainer()}\n                    <p className=\"sub-text\">\n                        View your NFT collection in the metaverse âœ¨\n                    </p>\n                    <small className=\"wallet-address\">{walletAddress}</small>\n                    {!walletAddress && renderNotConnectedContainer()}\n                </div>\n                {walletAddress && renderConnectedContainer()}\n                <div className=\"footer-container\">\n                    <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo}/>\n                    <a\n                        className=\"footer-text\"\n                        href={TWITTER_LINK}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >{`built by @${TWITTER_HANDLE}`}</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}