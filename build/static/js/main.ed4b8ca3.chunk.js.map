{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","SystemProgram","web3","TWITTER_HANDLE","Keypair","TWITTER_LINK","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","nftCount","App","useState","walletAddress","setWalletAddress","inputNameValue","setInputNameValue","inputNftValue","setInputNftValue","nftList","setNftList","userName","setUserName","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","error","connectWallet","saveName","length","saveNft","provider","getProvider","program","Program","rpc","addNft","accounts","user","wallet","getNftList","onInputNameChange","event","value","target","onInputNftChange","connection","Connection","Provider","createNftAccount","initialize","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onSubmit","preventDefault","type","placeholder","name","onChange","onClick","map","nft","src","nftLink","alt","userAddress","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed4b8ca3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","/*\nCommands\n\nUpdate idl after redeploy the Solana program\nanchor build\n */\n\nimport {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport idl from './idl.json';\nimport kp from './keypair.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport './App.css';\n\n// Constants\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n    preflightCommitment: \"processed\"\n};\nconst { SystemProgram, Keypair } = web3;\nconst TWITTER_HANDLE = 'kittiecrypto';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NFTS = [\n    'https://media3.giphy.com/media/k0IRv7HUUqL3BJqYbI/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g',\n    'https://media0.giphy.com/media/4oXQFWY1WRAxCAbS2H/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g',\n    'https://media0.giphy.com/media/xxBBZgE1XpreXSsNPz/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g',\n    'https://media1.giphy.com/media/KluRpaqe0ZyyFRfDzi/200w.webp?cid=ecf05e47x3bv5upff2ho1grerxoqyp4pbcu0khbo1yw0vtxx&rid=200w.webp&ct=g'\n];\n\n// Lets\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\nlet nftCount = 0;\n\nconst App = () => {\n\n    // State\n    const [walletAddress, setWalletAddress] = useState(null);\n    const [inputNameValue, setInputNameValue] = useState('');\n    const [inputNftValue, setInputNftValue] = useState('');\n    const [nftList, setNftList] = useState([]);\n    const [userName, setUserName] = useState('');\n\n    /*\n     * This function holds the logic for deciding if a Phantom Wallet is\n     * connected or not\n     */\n    const checkIfWalletIsConnected = async () => {\n        try {\n            const {solana} = window;\n\n            if (solana) {\n                if (solana.isPhantom) {\n                    console.log('Phantom wallet found!');\n                    /*\n                     * The solana object gives us a function that will allow us to connect\n                     * directly with the user's wallet!\n                     */\n                    const response = await solana.connect({onlyIfTrusted: true});\n                    console.log(\n                        'Connected with Public Key:',\n                        response.publicKey.toString()\n                    );\n\n                    /*\n                    * Set the user's publicKey in state to be used later!\n                    */\n                    setWalletAddress(response.publicKey.toString());\n                }\n            } else {\n                console.log('Solana object not found! Get a Phantom Wallet ğŸ‘»');\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    /*\n     * Let's define this method so our code doesn't break.\n     * We will write the logic for this next!\n     */\n    const connectWallet = async () => {\n        const {solana} = window;\n        if (solana) {\n            const response = await solana.connect();\n            console.log('Connected with Public Key:', response.publicKey.toString());\n            setWalletAddress(response.publicKey.toString());\n        }\n    };\n    const saveName = async () => {\n        if (inputNameValue.length > 0) {\n            console.log('Name:', inputNameValue);\n            setUserName(inputNameValue);\n        } else {\n            console.log('Empty input name. Try again.');\n        }\n    };\n    const saveNft = async () => {\n        if (inputNftValue.length === 0) {\n            console.log(\"No NFT link given!\")\n            return\n        }\n        setInputNftValue('');\n        console.log('URL:', inputNftValue);\n\n        try {\n            const provider = getProvider();\n            const program = new Program(idl, programID, provider);\n\n            await program.rpc.addNft(inputNftValue, {\n                accounts: {\n                    baseAccount: baseAccount.publicKey,\n                    user: provider.wallet.publicKey,\n                },\n            });\n            console.log(\"NFT successfully sent to program\", inputNftValue);\n\n            await getNftList();\n        } catch (error) {\n            console.log(\"Error sending NFT:\", error)\n        }\n    };\n    const onInputNameChange = (event) => {\n        const {value} = event.target;\n        setInputNameValue(value);\n    };\n    const onInputNftChange = (event) => {\n        const {value} = event.target;\n        setInputNftValue(value);\n    };\n    const getProvider = () => {\n        const connection = new Connection(network, opts.preflightCommitment);\n        const provider = new Provider(\n            connection, window.solana, opts.preflightCommitment,\n        );\n        return provider;\n    }\n    const createNftAccount = async () => {\n        try {\n            const provider = getProvider();\n            const program = new Program(idl, programID, provider);\n            console.log(\"ping\")\n            await program.rpc.initialize({\n                accounts: {\n                    baseAccount: baseAccount.publicKey,\n                    user: provider.wallet.publicKey,\n                    systemProgram: SystemProgram.programId,\n                },\n                signers: [baseAccount]\n            });\n            console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n            await getNftList();\n\n        } catch(error) {\n            console.log(\"Error creating BaseAccount account:\", error)\n        }\n    }\n\n    /*\n     * We want to render this UI when the user hasn't connected\n     * their wallet to our app yet.\n     */\n    const renderUserNameContainer = () => (\n        <div className=\"username-container\">\n            Hi {userName}!\n        </div>\n    );\n\n    const renderNotConnectedContainer = () => (\n        <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWallet}>\n            Connect to Wallet\n        </button>\n    );\n\n    const renderSetNameInput = () => (\n        <div className=\"form-container\">\n            <form\n                onSubmit={(event) => {\n                    event.preventDefault();\n                    saveName()\n                }}>\n                <input type=\"text\" placeholder=\"Set your name\" name=\"userName\" value={inputNameValue}\n                       onChange={onInputNameChange}/>\n                <button type=\"submit\" className=\"cta-button submit-button\">Save</button>\n            </form>\n        </div>\n    );\n\n    const renderConnectedContainer = () => {\n        if (nftList === null) {\n            return (\n                <div className=\"connected-container\">\n                    <button className=\"cta-button submit-nft-button\" onClick={createNftAccount}>\n                        Do One-Time Initialization For NFT Program Account\n                    </button>\n                </div>\n            )\n        } else {\n            return(\n                <div className=\"connected-container\">\n                    <div className=\"add-nft-container\">\n                        <form\n                            onSubmit={(event) => {\n                                event.preventDefault();\n                                saveNft()\n                            }}>\n                            <input type=\"text\" name=\"nftValue\" placeholder=\"Add NFT URL\" value={inputNftValue}\n                                   onChange={onInputNftChange}/>\n                            <button type=\"submit\" className=\"cta-button submit-button\">Add</button>\n                        </form>\n                    </div>\n                    <table className=\"nft-table\">\n                        <thead className=\"nft-item table-header\">\n                        <tr>\n                            <th className=\"item-name\">Item</th>\n                            <th className=\"item-price\">Acquisition Price</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr className=\"divider\">\n                            <td>&nbsp;</td>\n                        </tr>\n                        {nftList.map(nft => (\n                            <tr className=\"nft-item\" key={nftCount+=1}>\n                                <td className=\"item-name\"><img src={nft.nftLink} alt={nft.userAddress.toString()}/> <span>Lucaionescuart GIF</span></td>\n                                <td className=\"item-price\">1 SOL</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            )\n        }\n    };\n\n    /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n    useEffect(() => {\n        const onLoad = async () => {\n            await checkIfWalletIsConnected();\n        };\n        window.addEventListener('load', onLoad);\n        return () => window.removeEventListener('load', onLoad);\n    }, []);\n\n    const getNftList = async() => {\n        try {\n            const provider = getProvider();\n            const program = new Program(idl, programID, provider);\n            const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            console.log(\"Got the account\", account)\n            setNftList(account.nftList)\n\n        } catch (error) {\n            console.log(\"Error in getGifList: \", error)\n            setNftList(null);\n        }\n    }\n\n\n    useEffect(() => {\n        if (walletAddress) {\n            console.log('Fetching NFT list...');\n            getNftList()\n        }\n    }, [walletAddress]);\n\n    return (\n        <div className=\"App\">\n            <div className={walletAddress ? 'authed-container' : 'container'}>\n                <div className=\"header-container\">\n                    <p className=\"header\">NFT wallet <small>working on Devnet</small></p>\n                    {walletAddress && !userName && renderSetNameInput()}\n                    {userName && renderUserNameContainer()}\n                    <p className=\"sub-text\">\n                        View your NFT collection in the metaverse âœ¨\n                    </p>\n                    <small className=\"wallet-address\">{walletAddress}</small>\n                    {!walletAddress && renderNotConnectedContainer()}\n                </div>\n                {walletAddress && renderConnectedContainer()}\n                <div className=\"footer-container\">\n                    <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo}/>\n                    <a\n                        className=\"footer-text\"\n                        href={TWITTER_LINK}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >{`built by @${TWITTER_HANDLE}`}</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}